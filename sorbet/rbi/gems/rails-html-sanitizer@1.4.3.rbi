# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails-html-sanitizer` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Rails
  extend ::ActiveSupport::Autoload

  class << self
    def app_class; end
    def app_class=(_arg0); end
    def application; end
    def application=(_arg0); end
    def backtrace_cleaner; end
    def cache; end
    def cache=(_arg0); end
    def configuration; end
    def env; end
    def env=(environment); end
    def gem_version; end
    def groups(*groups); end
    def initialize!(*args, &block); end
    def initialized?(*args, &block); end
    def logger; end
    def logger=(_arg0); end
    def public_path; end
    def root; end
    def version; end
  end
end

module Rails::Html; end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  def initialize; end

  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  def initialize; end

  def attributes; end
  def attributes=(attributes); end
  def scrub(node); end
  def tags; end
  def tags=(tags); end

  protected

  def allowed_node?(node); end
  def keep_node?(node); end
  def scrub_attribute(node, attr_node); end
  def scrub_attribute?(name); end
  def scrub_attributes(node); end
  def scrub_css_attribute(node); end
  def scrub_node(node); end
  def skip_node?(node); end
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  def initialize; end

  def sanitize(html, options = T.unsafe(nil)); end
  def sanitize_css(style_string); end

  private

  def allowed_attributes(options); end
  def allowed_tags(options); end
  def loofah_using_html5?; end
  def remove_safelist_tag_combinations(tags); end

  class << self
    def allowed_attributes; end
    def allowed_attributes=(_arg0); end
    def allowed_tags; end
    def allowed_tags=(_arg0); end
  end
end

class Rails::Html::Sanitizer
  def sanitize(html, options = T.unsafe(nil)); end

  private

  def properly_encode(fragment, options); end
  def remove_xpaths(node, xpaths); end

  class << self
    def full_sanitizer; end
    def link_sanitizer; end
    def safe_list_sanitizer; end
    def white_list_sanitizer; end
  end
end

Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  def allowed_node?(node); end
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  def initialize; end

  def scrub(node); end
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer
Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)
